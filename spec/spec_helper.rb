# frozen_string_literal: true

DEBUGGING = ENV.fetch("DEBUG", "false").casecmp("true").zero?

# External gems
require "debug" if DEBUGGING
require "silent_stream"
require "rspec/block_is_expected"
require "rspec/block_is_expected/matchers/not"
require "rspec/stubbed_env"
require "fileutils"

IS_CI = ENV.fetch("CI", "false").casecmp("true") == 0

RSpec.configure do |config|
  # Enable flags like --only-failures and --next-failure
  config.example_status_persistence_file_path = ".rspec_status"

  # Disable RSpec exposing methods globally on `Module` and `main`
  config.disable_monkey_patching!

  config.expect_with :rspec do |c|
    c.syntax = :expect
  end

  config.include(SilentStream)

  # Exclude examples/groups tagged with :skip_ci when running on CI
  # Usage: add `:skip_ci` to any example or group you want to skip on CI
  if IS_CI
    config.filter_run_excluding :skip_ci => true
  end

  # Reset global state around each example to avoid cross-test pollution
  config.around do |example|
    begin
      # Silence STDOUT for examples NOT tagged with :check_output
      if DEBUGGING || example.metadata[:check_output]
        example.run
      else
        silence_stream($stdout) do
          example.run
        end
      end
    end
  end

  # Cleanup autogenerated gems after the entire suite
  config.after(:suite) do
    begin
      if ENV.fetch("AUTOGEN_FIXTURE_CLEANUP", "false").casecmp("true").zero?
        gem_mine_root = File.expand_path(File.join(__dir__, "fixtures", "gem_mine"))
        if File.directory?(gem_mine_root)
          # Remove everything inside gem_mine_root, but keep the directory itself
          Dir.glob(File.join(gem_mine_root, "*"), File::FNM_DOTMATCH).each do |entry|
            base = File.basename(entry)
            next if base == "." || base == ".."
            FileUtils.rm_rf(entry)
          end
        end
      else
        puts "Skipping autogenerated gem fixture cleanup (AUTOGEN_FIXTURE_CLEANUP=false)"
      end
    rescue StandardError => e
      warn "test cleanup warning: #{e.class}: #{e.message}"
    end
  end
end

# Within the test suite, we will consider this gem to be activated
ENV["FLOSS_FUNDING_TIMECOP_RSPEC"] = "Free-as-in-beer"

# NOTE: Gemfiles for older rubies won't have kettle-soup-cover.
#       The rescue LoadError handles that scenario.
begin
  require "kettle-soup-cover"
  require "simplecov" if Kettle::Soup::Cover::DO_COV # `.simplecov` is run here!
rescue LoadError => error
  # check the error message and re-raise when unexpected
  raise error unless error.message.include?("kettle")
end

require "timecop/rspec"
